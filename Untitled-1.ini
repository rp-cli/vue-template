hash是在url上拼接/#url/，刷新页面不会有影响
history是直接改变url，刷新页面会有影响

对象查找自身属性时，如果找不到，就会通过_proto去构造函数的prototype上查找

箭头函数和普通函数的区别
没有自己的作用域，继承上层作用域的this，没有arguments

new操作符
创建一个对象
将改对象的_proto指向该函数的prototype

eventLoop
js是单线程，eventloop 宏任务和微任务 js在执行完所有同步任务后回去检查有没有微任务，如果有就先执行完，然后再去检查宏任务，执行完一个宏任务后再去检查微任务

输入一个url
dns解析，找到对应ip
三次握手四次挥手建立连接
从服务器请求资源 https
请求到html
dom tree，cssom tree  
render Tree
js 加载 加载完之后渲染页面

document.ready 和 DOMContentLoaded dom加载完毕
window.onload所有资源加载完毕

回流  位置或者大小发生发生改变
重绘  样式发生改变 重新绘制

js加载方式  defer  async

async 先加载完先执行
defer 一定是按照加载的顺序来

css加载不堵塞，构建堵塞
js加载和执行都堵塞，如果用defer是异步加载，等dom构建完执行，async也是异步加载，但是加载完就执行  

性能优化
cdn
http缓存
webpack构建 

react组件传值
父子组件传值
兄弟组件传值，可以让父组件来传
context                   
redux

水平垂直居中

flex: 1   flex-grow: 1  flex-shrink: 1  flex-basis: 0%
剩余空间占多少
压缩多少
算完flex-basis再根据剩余空间来分配，有剩余按照flex-grow，长度不够按照flex-shrink（flex-basis不是auto的时候会覆盖width，是auto的时候则是width生效）

border-box  标准盒模型  content = padding + 内容
content-box  content = 内容

什么是跨域
一个域名分为  https://www.baidu.com:8080/xxx.json
协议 子域名 主域名 端口号  资源地址
跨域方法：
跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了。
所以一些像表单提交（写入操作，比如表单提交，或者是资源嵌入，比如jsonp用的script）就可以跨域，因为不用获取新的内容，ajax就会跨域，因为归根结底，跨域是为了阻止用户读取到另一个域名下的内容，Ajax 可以获取响应，浏览器认为这不安全，所以拦截了响应。

csrf其实就是一个跨域请求，但是他攻击你访问过的网站能带上对应的cookie，一般就是表单提交资源嵌入
大概过程就是：1.登陆www.A.com，浏览器有了cookie
            2.不小心访问了危险网站www.B.com,然后B发了一个请求给A，你这个请求的域名是www.A.com/xxxx，就是同源，所以能拿到A的cookie，然后就炸开了

cookie的同源策略  只要你请求某个域名，就会带上某个域名的cookie，可以用samesite去限制（就是跨域请求的时候不会带上cookie）

cookie属性 domain path http-only secure samesite  expires/max-age  name value

跨域 csrf cookie 彻底懂了 牛逼

jsonp 就是js手动生成一个script标签，src标签写入对应的接口，理论上就是拼接上一个callback，然后后端返回执行回调的内容，前端就会执行然后后端执行函数时的参数，前端就可以拿到
代理  webpack proxy
nginx
cors 服务器设置相应头  Access-Control-Allow-Origin   允许访问的域名
Access-Control-Allow-Method  允许访问的方法
Access-Control-Allow-Credentials  允许携带cookie
Access-Control-Max-Age  预检的存活时间
Access-Control-Allow-Headers  允许哪个头访问我
Access-Control-Expose-Headers  允许返回的头
postMessage

http有哪些请求 get post put delete head   
get和post的区别  get不安全，有大小限制
    常见状态码  get一般会有缓存，因为它是去服务器获取东西
    post不会有，因为它是去服务器改东西，缓存也没有意义

http缓存
强缓存和协商缓存
强缓存 看服务器返回的是expires/cache-control（max-age） 

协商缓存   last-modified/if-modified-since
          etag/if-none-match
          3xx 重定向  304协商缓存  没有更新
          4xx  400 客户端请求报文有语法错误  401 需要有通过 HTTP 认证  403 禁止访问   404 找不到  405 不允许使用改方法访问  access-control-allow-Methods
          500 服务端报错
web安全  csrf token  cookie samesite 

es6 常用方法
const/let  暂时性死区，let块级作用域
箭头函数

vue fiber是啥，为啥要有fiber，fiber的实现思路

vue使用 object.defineProperty 在 getter的时候进行依赖收集，将所有watcher对象的实例放到dep中
在setter的时候调用dep的notify方法通知内部所有的watcher对象调用对应的update进行视图更新

react15 协调器 和 渲染器 交替工作 递归
react16 可中断的循环过程  调度器  协调器  渲染器  
调度器和协调器之间  调度器调度优先级高的任务  
协调器负责找出需要更新的组件打上标记 然后交给渲染器

fiber是啥，fiber是纤程，是一种新的数据结构，更新时调度机制， 使得diff阶段可以被暂停

fiber算是链表吧  children，father， sibling

vue不需要fiber，因为vue可以精确更新，react自顶向下更新

vue diff和react diff的区别

react 从左到右
vue2  首尾交叉对比
vue3  首尾对比往中间收缩，最长递增子序列算法

react15 - 虚拟dom（是一颗普通的tree）- diff（生成一个新的tree对比）- 交给Renderer
react16 - 虚拟dom（fiber tree） - diff（生成一个新的tree对比）可以中断的过程 - 打上标记 - 然后交给renderer

算法排序  刷完了

react是什么
react是现在比较流行的js框架，不用手动操作dom，组件化，成熟的生态

react

节流防抖  throttle  debounce

必包
作用域
继承
变量提升
typescript（一问这个慌的像只鸡）
type和interface区别  type可以声明基本类型和联合类型  interface可以声明函数   
ts编程
react 
setState同步还是异步
setAge(1)
如何获取异步
webpack流程   
hook原理   
ahooks原理  
babel runtime  
qiankun
ssr  
umi   
微前端和iframe的区别

key为什么不能是index

react事件机制
react事件合成， onClick还是click，onChange变成change，blur，keydown，keyup
react事件绑定  原本的dom上会绑定一个noop函数，即空函数，document上会绑定真正的函数
react事件触发  冒泡到document，document上绑的是dispatchEvent，点击就是调用dispatchEvent
如何通过原生的dom找到对应的fiber对象，react初始化的时候，用一个随机的 key internalInstanceKey 
指针指向了当前dom对应的fiber对象，fiber对象用stateNode指向了当前的dom元素。

事件捕获  事件冒泡

react 在渲染fiberTree 的时候看到属性上的onclick事件，会先进

hook原理 嚼不动

useMemo，返回一个缓存的值
useCallback，返回一个缓存的callback

webpack构建过程
读取入口文件
调用loader编译文件
收集依赖，babel进行解析
生成chunk
输出

常用的loader  babel-loader url  file style css-loaded less  从右到左

webpack优化
optimization  文件压缩 treser-plugn
code-split  splitchunk
treeshaking

react-router  路由原理

vue和react的区别  
react函数式编程  vue不是
react推荐数据不可变immutable  vue直接改变原状态
react自上而下更新  vue精准更新

set, Map

ts子集还是子类 external 脚手架debugger qiankun底层原理 css样式命名规范(css隔离问题) 巨石应用 页面卡顿排查 vue 虚拟列表实现(interception.shenmegui)  npmlink  source-map  
localstorage   虚拟列表   离线缓存

key同package.json文件中的dependencies对象的key一样  
value第三方依赖编译打包后生成的js文件，然后js文件执行后赋值给window的全局变量名称

项目经历要搞一搞

js堵塞动画

垃圾回收机制

github项目

如何在脚手架中打包

如何分析打包的资源大小

async await原理

工作中遇到的问题   load chunk failed  微前端 样式隔离 css命名 和iframe区别  巨石应用构建问题  内存泄漏排查问题（memory，performance） nodejs断点

react hook原理  

eslint

umi

css样式命名规范(css隔离问题) 外部的npm包肯定是用不了css-module，因为他的css有后缀，你改不到，不纠结了

多语言？

nginx

localstorage

babel是怎么编译的  AST   parse  transform  generate
parse 阶段把代码从字符串转换为 AST，transform 阶段对 AST 做各种增删改，generate 阶段再把转换后的 AST 打印成目标代码并生成 sourcemap。

babel-preset
babel-plugin

preset-env preset-env 内部会自动引入相应的 plugin 来做 AST 的转换，主要是转移es6～es9的语法
preset-env是ES语法插件的合集，官方已经不再推荐使用preset-201x之类的包，该包可以通过配置自动兼容代码，包括自动引入polyfill垫片处理新的API
（例如：Promise,Generator,Symbol等）以及 实例方法（例如Array.prototype.includes等）。


我们知道，ES+中不仅包含新增的语法（如箭头函数、类），还有一些实例的扩展（Array.prototype.includes等），以及很多内置函数（如Promise、Symbol）。
然而preset-env在不引入polyfill时，对于处理这些应用场景是无能为力的。而为了解决这样的问题，我们通常有两种方法：使用 Polyfill 或 Babel-runtime 
进行功能填充。接下来我们会举例说明两者的优缺点以及应用场景。

Babel >= 7.4.0  安装 core-js 替代 babel-polyfill ，而 regenerator-runtime 会在我们安装 @babel/runtime 时自动安装，所以不必单独安装了。
Babel <= 7.4.0  开发类库, 选择 @babel/runtime, 内部项目，@babel/polyfill

useBuiltIns  entry, usage 和 false。

false 只做了语法转换， entry 引入了所有的es扩展包，不管用不用得着一股脑都打包进来，只有 usage 会自动检测代码中用到的功能自动引入模块（注：
babel默认不会检测第三方依赖包代码，所以使用 usage 时，可能会出现引入第三方的代码包未注入模块而引发bug）。
所以，这里如果不考虑代码包大小，你可以选择 entry 方式。而如果你需要代码尽可能的精简，则使用 usage，这也是官方推荐的用法。

babel-runtime 开发类库/工具（生成不污染全局空间和内置对象原型的代码）, 借助 @babel/runtime 中帮助函数（helper function）移除冗余工具函数

html5新特性有哪些
web storage   
    localstorage浏览器关闭后还会存在 大小5m   
    localstorage用处  用来存储token  安全性问题  token的key名字起的不能这么简单   用户信息存储
    sessionStorage窗口关闭就会消失
web worker
    GUI线程和js线程是互斥的，可以新建一个worker，不同页面不能共享同一个worker
service worker
websocket  建立长链接，服务端可以主动向客户端推送数据，比如数据大盘

css3新特性
背景
渐变
转换和变形
过度
动画

移动端方案
淘宝方案  1rem等于根元素字体大小 缺点 字体也会跟着缩放  移动端方案
const oHtml = document.getElementsByTagName('html')[0]
const width = oHtml.clientWidth;
// 320px的屏幕基准像素为12px
oHtml.style.fontSize = 12 * (width / 320) + "px";


fiber tree上每个fiber节点都放了一个memorizeState去存储hook信息，是一个通过next串联的链表

useRef  将传进来的value包装成了一个拥有current属性的对象，冻结了一下，并将其放在memorizeState上， update ref还是返回原来的对象
useCallback memorizeState存储了一个数组，一个是传入的回调函数，一个是传入的dep，会将dep进行比较

useEffect 的 hook 在 render 阶段会把 effect 放到 fiber 的 updateQueue 中，这是一个  lastEffect.next 串联的环形链表
，然后 commit 阶段会异步执行所有 fiber 节点的 updateQueue 中的 effect。
useLayoutEffect 和 useEffect 差不多，区别只是它是在 commit 阶段的 layout 阶段同步执行所有 fiber 节点的 updateQueue 中的 effect。
因为useEffect是在react组件render之后才会执行，所以在useEffect获取的状态一定是最新的

useState 同样分为 mountState 和 updateState 两个阶段：

mountState 会返回 state 和 dispatch 函数，dispatch 函数里会记录更新到 hook.queue，然后标记当前 fiber 到根 fiber 的 lane 需要更新，之后调度下次渲染。
再次渲染的时候会执行 updateState，会取出 hook.queue，根据优先级确定最终的 state 返回，这样渲染出的就是最新的结果。


react 16,17 
在合成事件和钩子函数中是异步的，在原生和setTimeout中不是批量异步的
异步不是说像setTimeout和Promise的那种异步，而是调用顺序的问题，只是合成事件和钩子函数的调用顺序在更新之前，导致在合成事件和钩子函数中没法立马拿到更新后的值
批量更新
react 18 全部是异步批量更新

“自由，em就比如，hook得顶层，不要条件循坏用，而且react重心智负担：
就闭包陷阱那一套过时变量嘛，依赖的选择，还有重复渲染这些问题，我一直
不理解为什么不把这些心智负担收到框架里，我觉得react是有这个能力的。vue3的话，
你想咋用咋样api咋样，setup也会只用一次，也不会像新旧树对比hook多次调用”

react setState之后发生了什么  
setState之后，就是生成一份新的虚拟dom，然后diff算法，去把改变的部分渲染上去

详细一点

setState之后
react是会重新渲染整个vdom，vue不会，vue是响应式的，老的react会直接重新渲染整个vdom，然后遍历进行两颗新老vdom tree的比较，调和阶段reconciler - rerender渲染器，
递归遍历子节点, reconclier和rerender之前是交替工作的，所以如果你中途中断，会导致出现更新不完全的dom

react16 scheduler 调度器 reconciler 调和器  rerender渲染器   scheduler会调度，然后reconciler负责dom diff，现在从递归改成了循环，shouldYield判断是否继续，
然后在需要变更的dom上搭上标记，然后在全部交给rerender去渲染，就不会出现渲染不完整dom的情况

渲染流程分为render阶段 和 commit阶段
render阶段 给vdom中变化的部分搭上增删改的标记，存到一个effectList队列里，  这个过程叫reconciler 由scheduler调度
commit阶段 before mutation、mutation、layout。
